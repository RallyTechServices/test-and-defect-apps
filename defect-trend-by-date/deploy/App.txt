<!DOCTYPE html>
<html>
<head>
    <title>defect-trend-by-date</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Oct 07 2014 14:14:33 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Oct 07 2014 14:14:33 GMT-0700 (PDT)";
        var CHECKSUM = 5932252550;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("Rally.TechnicalServices.burndown.DefectTrendCalculator", {
    extend: "Rally.data.lookback.calculator.TimeSeriesCalculator",

    allowedValues: [],
    includeCreatedTotal: false,
    
    config: {
        closedStateNames: ['Closed']
    },
    
    getDerivedFieldsOnInput: function () {
        var completedStates = this.config.closedStateNames
        var oid_cutline = 20631303804;
        var allowed_values = this.allowedValues || [];
        
        if ( typeof allowed_values === 'string' ) {
            allowed_values = allowed_values.split(/,/);
        }
        var derived_fields = [];
        if ( this.includeCreatedTotal ) {
            derived_fields.push({
                "as": "ExistingDefect",
                "f": function (snapshot) {  
                    if (snapshot.ObjectID > oid_cutline) {
                        return true;
                    } 
                    return false;
                }
            });
        }
        if ( allowed_values.length === 0 ) {
            derived_fields.push({
                "as": "ActiveDefect",
                "f": function (snapshot) {
                    var state = snapshot.State;
                    
                    if (snapshot.ObjectID > 20631303804 && Ext.Array.indexOf(completedStates,state) == -1) {
                        return true;
                    }
                    return false;
                }
            });
            derived_fields.push({
                "as": "ClosedDefect",
                "f": function (snapshot) {
                    var state = snapshot.State;
                    
                    if (snapshot.ObjectID > 20631303804 && Ext.Array.indexOf(completedStates,state) > -1) {
                        return true;
                    }
                    return false;
                }
            });
        } else {
            Ext.Array.each(allowed_values, function(allowed_value){
                derived_fields.push({
                    "as": allowed_value,
                    "f": function (snapshot) {
                        var state = snapshot.State;
                        
                        if (snapshot.ObjectID > 20631303804 && state == allowed_value ) {
                            return true;
                        }
                        return false;
                    }
                });
            });
        }
        
        return derived_fields;
    },

    getMetrics: function () {
        var allowed_values = this.allowedValues || [];
        if ( typeof allowed_values === 'string' ) {
            allowed_values = allowed_values.split(/,/);
        }
        var metrics = [];
        if ( this.includeCreatedTotal ) {
            metrics.push({
                "filterField": "ExistingDefect",
                'as':'Created',
                'f':'filteredCount',
                'filterValues':[true]
            });
        }
        
        if ( allowed_values.length === 0 ) {
            metrics.push({
                "filterField": "ActiveDefect",
                "as": "Open",
                "f": "filteredCount",
                "filterValues": [true]
            });
            metrics.push({
                "filterField": "ClosedDefect",
                "as": "Closed",
                "f": "filteredCount",
                "filterValues": [true]
            });
        } else {
            Ext.Array.each(allowed_values, function(allowed_value){
                metrics.push({
                    "filterField": allowed_value,
                    "as": allowed_value,
                    "f": "filteredCount",
                    "filterValues": [true]
                });
            });
        }
        
        return metrics;
    },

    getSummaryMetricsConfig: function () {
        return [];
    },

    getDerivedFieldsAfterSummary: function () {
        return  [];
    },

    runCalculation: function (snapshots) {
        var chartData = this.callParent(arguments);

        this._formatCategories(chartData);
        return chartData;
    },
    
    _formatCategories:function(chartData){
        var categories = [];
        Ext.Array.each(chartData.categories,function(category) {
            var date_array = category.split('-');
            categories.push(date_array[1] + "/" + date_array[2]);
        });
        
        chartData.categories = categories;
        
    }
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 5, padding: 5 },
    items: [
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        if (this.isExternal()){
            this.showSettings(this.config);
        } else {
            this.onSettingsUpdate(this.getSettings());  
        }  
    },
    _preProcess: function() {
        this.down('#selector_box').add({
            xtype:'rallydatefield',
            fieldLabel: 'Start Date:',
            labelWidth: 65,
            stateId: 'rally.technicalservices.trend.defect.date.start',
            stateful: true,
            stateEvents: ['change'],
            listeners: {
                scope: this,
                change: function(box) {
                    var start_date = box.getSubmitValue();
                    this.logger.log("Start Date:",start_date);

                    this._getAllowedValues().then({
                        scope: this,
                        success:function(results){
                            this._makeChart(this.down('#display_box'),start_date,results);
                        },
                        failure:function(message){
                            this.down('#display_box').add({xtype:'container',html:'message'});
                        }
                    });
                    
                }
            }
        });
    },
    _getAllowedValues:function(){
        var deferred = Ext.create('Deft.Deferred');
        var type_path = 'Defect';
        var group_by_field = 'State';
        
        var allowed_values = [];
        
        Rally.data.ModelFactory.getModel({
            type: type_path,
            success: function(model){
                var field = model.getField(group_by_field);
                var attribute_definition = field.attributeDefinition;
                if ( attribute_definition && attribute_definition.AttributeType == "BOOLEAN" ) {
                    deferred.resolve([true,false]);
                } else {
                    field.getAllowedValueStore().load({
                        callback: function(values,operation,success) {
                            Ext.Array.each(values, function(value){
                                allowed_values.push(value.get('StringValue'));
                            });
                            deferred.resolve(allowed_values);
                        }
                    });
                }
            },
            scope: this
        });
        return deferred.promise;
    },
    _getUserTimeZone: function() {
        var tz = this.getContext().getUser().UserProfile.TimeZone;
        if (!tz) {
            tz = this.getContext().getWorkspace().WorkspaceConfiguration.TimeZone;
        }
        return tz;
    },
    _makeChart: function(display_box,start_date,allowed_values) {
        this.logger.log("_makeChart",start_date,allowed_values);
        start_date = Rally.util.DateTime.fromIsoString(start_date);
        
        var show_states = this.getSetting('allowed_values') || allowed_values;
        var ignore_creation_date = this.getSetting('ignore_creation_date') || false;
        var environment = this.getSetting('environment') || false;
        
        var find = { 
            _TypeHierarchy: 'Defect',
            _ProjectHierarchy: this.getContext().getProject().ObjectID
        };
        if ( ! ignore_creation_date ) {
            find["CreationDate"] = { "$gt": start_date }
        }
        
        if (environment) {
            find["Environment"] = environment;
        }
        
        display_box.removeAll();
        display_box.add({
            xtype:'rallychart',
            storeType: 'Rally.data.lookback.SnapshotStore',
            storeConfig: {
                find:find,
                fetch: ['PlanEstimate','State','Release','CreationDate'],
                hydrate: ['State']
            },
            calculatorType: 'Rally.TechnicalServices.burndown.DefectTrendCalculator',
            calculatorConfig: {
                timeZone: this._getUserTimeZone(),
                startDate: start_date,
                granularity: 'day',
                allowedValues: show_states,
                includeCreatedTotal: this.getSetting('show_created_count') || false,
                workDays: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
            },
            sort: {
                "_ValidFrom": 1
            },
            chartColors: ['#000000','#CC3366','#66FF66'],
            chartConfig: {
                chart: {
                    zoomType: "xy"
                },
                title: { text: 'Defect Trend' },
                xAxis: {
                    tickmarkPlacement: 'on',
                    tickInterval: 14,
                    title: { text: 'Days' },
                    labels: { rotation: -65, align: 'right' }
                },
                yAxis: [{
                    min: 0,
                    title:{text:'Count'}
                }],
                tooltip: {
                    shared: true
                }
            }
        });
    },
    isExternal: function(){
      return typeof(this.getAppId()) == 'undefined';
    },
    
    _addCountToChoices: function(store){
        store.add({name:'Count',value:'Count',fieldDefinition:{}});
    },
        
    /********************************************
    /* Overrides for App class
    /*
    /********************************************/
    //getSettingsFields:  Override for App    
    getSettingsFields: function() {
        var me = this;
        
        var allowed_values = this.getSetting('allowed_values');
        this.logger.log("getting fields", allowed_values, typeof allowed_values);
        
        if ( typeof allowed_values === 'string' ) {
            allowed_values = allowed_values.split(/,/);
        }
        
        return [   {
            name: 'allowed_values',
            xtype: 'rallyfieldvaluecombobox',
            fieldLabel: 'Show States:',
            field: 'State',
            model: 'Defect',
            labelWidth: 75,
            width: 400,
            margin: 10,
            autoExpand: true,
            alwaysExpanded: true,
            multiSelect: true,
            readyEvent: 'ready'
        },
        {
            name: 'show_created_count',
            xtype:'rallycheckboxfield',
            fieldLabel: 'Show Total:',
            labelWidth: 75,
            margin: 10,
            readyEvent: 'ready'
        },
        {
            name: 'ignore_creation_date',
            xtype:'rallycheckboxfield',
            fieldLabel: 'Ignore Creation Date:',
            labelWidth: 75,
            margin: 10,
            readyEvent: 'ready'
        },
        {
            name: 'environment',
            xtype: 'rallyfieldvaluecombobox',
            fieldLabel: 'Environment',
            field: 'Environment',
            model: 'Defect',
            labelWidth: 75,
            margin: 10,
            readyEvent: 'ready'
        }];
    },
    //showSettings:  Override to add showing when external + scrolling
    showSettings: function(options) {
        this.logger.log("showSettings",options);
        this._appSettings = Ext.create('Rally.app.AppSettings', Ext.apply({
            fields: this.getSettingsFields(),
            settings: this.getSettings(),
            defaultSettings: this.getDefaultSettings(),
            context: this.getContext(),
            settingsScope: this.settingsScope
        }, options));

        this._appSettings.on('cancel', this._hideSettings, this);
        this._appSettings.on('save', this._onSettingsSaved, this);
        
        if (this.isExternal()){
            if (this.down('#display_box').getComponent(this._appSettings.id)==undefined){
                this.down('#display_box').add(this._appSettings);
            }
        } else {
            this.hide();
            this.up().add(this._appSettings);
        }
        return this._appSettings;
    },
    _onSettingsSaved: function(settings){
        this.logger.log('_onSettingsSaved',settings);
        Ext.apply(this.settings, settings);
        this._hideSettings();
        this.onSettingsUpdate(settings);
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        //Build and save column settings...this means that we need to get the display names and multi-list
        this.logger.log('onSettingsUpdate',settings);
        
        var type = this.getSetting('type');
        this._preProcess();
    }
});

            
               Rally.launchApp('CustomApp', {
                   name: 'defect-trend-by-date'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>